Lecture 1a: 

    - Topics : 
        -Black box abstraction.
        -Conventional interfaces
            -Generic operations
            -Large scale structure and modularity
            -Object-oriented programming
            -Operations on aggregates
        -MetaLinguistic abstraction
        -Logic Programming language (Apply eval loop)


    - Declarative language
    - Imperative language
    - Process (imperative knowledge)
    - Procedure
    - Real problem in computers is large systems. 
    - Techniques for controlling complexity of large systems. 
    - Constraints in building large systems are limitations of our own minds. 
    - Blackbox abstraction 
        - To build bigger boxes
        - To abstract out the strategy.  

    - Primitive data, primitive procedures, procedures
    - Procedure composition, construction of compound data
    - Procedure definition, simple data abstraction
    - Higher order procedures, data as procedures. 

    -General framework of thinking about langauges
        -Primitive elements
        -means of combining those primitive elements.
        -means of abstraction

    -Combining primitive functions to make advanced functions.

Lecture 1B: 
    -Substitution model
    -Linear Iteration space = O(1), time = O(x)
    -Linear recursion space = O(x), time = O(x)

Lecture 2A (Higher-order functions): 
    -Encapsulation using higher order procedures.
    -Stratchey's rights and privileges of first class citiziens
        -To be named by variables.
        -To be passed as arguments to procedures.
        -To be returend as values of procedures.
        -To be incorporated into datastructures.
    -Having procedures as first class data allows one to make powerful abstractions which encodes general methods like newton's methods in a very clear way.

Lecture 2B: 
    -Prmitive things
    -Means of combination
    -Means of abstraction
    -Higher order procedures
    -Crucial idea: Layered system. 
    -Divorce task of building things with task of implementing the parts.
    -Same issues for data. 
        -Primitive data.
        -Compound data. Means of combination for data
        -Methodoloy for abstraction, abstraction barriers.
     -Strategy of wishful thinking

     -Structure of compound data
        -Construcdtors
        -Selectors
        -Layer of abstractions between +Rat, *Rat, -Rat and Pairs
            is Make-Rat, Numer, Denom (Constructors and Selectors)
        -Isolate use from representation.
        -Why separate use from representation
            -Alternative representations
            -Invariants
        -eg fractions, vectors, lines
        -Closure.
        -Abstract data
        -Axioms for rationals, pairs, cons, car and cdr
        -Blur the line between data and procedure.
        -A procedure is a real entity

Lecture 3A: 
    -Talked about compound data.
        -Methodology of data abstraction. Isolate use from representation
        -Lisp way of gluing things, cons car and cdr, how cons car and cdr are implemented is
            irrelevant. 
        -Example : Rationals, Vectors, 
        -Procedures could be objects, you can name them.
        -Procedular representaiton of data is called message passing.
        -Closure. Cons is closed under forming pairs.
        -List : Chain of pairs.
        -Scaling a list, map a list and scale list in terms of map.
        -for-each function
        -Start moving away from the control strcutures and think of operations on aggregates. (eg not relevant how map is implemented)
        -Example
            -List structure, issues of abstraction and representation, capturing commonality with higher order procedures. Meta linguistic abstraction. Build suitable higher order language. 
            -When you think you of a language you think of
                -what are the primitives
                -means of combination
                -wmeans of abstraction.
                -There is no difference between procedures and data. 

            -Primitive : Picture. Empty, Picture in example draws an image scaled to the specified rectanagle
            -Primitive operations : Rotate, Beside, Above, Flilp
            -Closure property. World of picture is closed under means of primitive combination (beside, flip-horiz, flip-vertvttvt, above) Like pairs are closed under cons
            -Abstract typical patterns of combining painters. These procedures are ordinary scheme procedures since picture language is embedded in scheme eg. right-split, corner-split
            -Abstract patterns of combining painter operations. We view painter operations as objects to manipulate.
            -Implementaiton of picture language
                -Basic element: Rectangle, Origin, Horizontal part of rectangle, Vertical part of rectangle
                -Make-Rect, Horiz, Vert, Originbbyh
            -Coord-map
            -Beside procedure, Rotate procedure
            -Using closure property. Using procedural representation to ensure closure.
            -Picture langauge is embedded in lisp. ALl the power of lisp is automatically available to this language. 
            -Nicely embedding a language in another language. 
            -No difference between procedure and data.

            -Henderson's example
                -Fundamental data abstraction is painters. 
                -Means of combination satisfy the closure property. 
                -Abstracting means of combination of painters.

                Picture language structure
                    -Langauge of schemes of combination - Push, Beside
                    -Langauge of Geometric positions - Rotation, beside
                    -Langauge of primitive pics - Make Rect

                -Design problem is not implementing programs but implementing languages.


Lecture 3B: Symbolic Differentiation; Quotation
    -Robust systems: Insensitive to small changes. Small changes in problem should only require 
        small change in solution
    -Class of problems which are neighbourhood of problems are tyring to solve. 
    -Power of embedding languages.
    -Confuse what is procedure and what is data.
    -Punch line: Example shows languages not only interpreted in lisp but languages that are interpreted in lisp.

Lecture 4A: 
    -Build a langauge to express rules that can be pattern matched. Means of interpreting that language. 
    -Instead of writing those rules in a language that the computer can understand, bring the computer to the level of us.
    -Trying to make a solution to a class of problems. Should be able to write rules for different problems in a generic way.
    -Encapsulate the ideas of matching, instantiation, control structure from the rules themselves.

Lecture 4B: Generic Operators
    -So far Horizontal abstraction barriers. The way you use data object from the way you implement it. 
    -Generic operator for vertical barriers.
    -Generic operator in haskell using type classes. 
    -Dispatch on type (Dynamic Dispatch)
    -Decentralized control.
    -A package for arithmetic.

Lecture 5A: Assignment, State and Side-effects
    - Functional programs are encoding of mathematical truths.
    - Programs are time dependent.
    - Environment model.
    - Bound variable and free variable.
    - scope of a variable. 
    - Environment, frame. 
    - Variables are bound in environment. 

Lecture 6A
    -Assignment
    -State
    -Implication of assignment and state
    -Substitution model breaks down. We have to use the environment model. 
    -Variable is not something that stands for a value. Variable now has to 
     somehow specify a place and the value in that place can change.
     (F x) != (F x ) if F has side effects. Suddenly we dont have to think about values
     but about time. 
     -A pair is not just a car or a cdr but it has an identiy. It has an object. Two pairs that have the same car or cdr might be same or different. 
     -Two pairs that have the same car or cdr might be same or different because suddenly we have to worry about sharing. 
     -All of these things enter as soon as we introduce assignment.
     -We have to think more mechanistically about our programs, its not just in terms of mathematics.
     -Random number generator example where we put state inside random number generator and separate that from monte carlo method. 
     -The reason we got into object oriented programming is because we want to build modular systems. Model a system that we see in the real world that relate to the real world. Like to build in the computer systems that mirror reality.
     -Another way to decompose systems, more like signal processing engineers view of the world rather than objects that communicate via sending messages. Its called stream processing. 
     -Stream is a data abstraction. (Cons-stream x y) (head s) (tail s)
     -For any x and y (Head (Cons-stream x y)) will be x and 
     -(Tail (Cons-stream x y)) will be y. 
     -The-Empty-Stream which is empty.
     -Stream functions. map-stream, filter-stream, accumulate, append-stream
     -With Stream processing we are establishing conventional interfaces. 
     -Flatten Stream of streams
     -FlatMap of streams. Collect syntactic sugar for nested flatMaps
     -Backtracking. 8-queens problem. 
     -8 queens problem solution, instead of trying to model the state of each process, we model the thing as a whole.
     -8 queens problem is an example of where the enumerator and the filter and the accumulator are mixed up.
     -Decouple the apparent order of things in the program from the actual order of things that happen in the computer.
     

     


